{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to attach JWT token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If token has expired (401) and we haven't tried to refresh yet\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Try to refresh the token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await axios.post('/api/auth/refresh', {}, {\n          headers: {\n            'Authorization': `Bearer ${refreshToken}`\n          }\n        });\n        const {\n          access_token\n        } = response.data;\n        localStorage.setItem('accessToken', access_token);\n\n        // Retry the original request with the new token\n        originalRequest.headers.Authorization = `Bearer ${access_token}`;\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh token failed, redirect to login\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Authentication API calls\nexport const authService = {\n  register: userData => apiClient.post('/auth/register', userData),\n  login: credentials => apiClient.post('/auth/login', credentials),\n  logout: () => apiClient.post('/auth/logout'),\n  forgotPassword: email => apiClient.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, password) => apiClient.post(`/auth/reset-password/${token}`, {\n    password\n  }),\n  validateToken: () => apiClient.get('/auth/validate-token')\n};\n\n// Dashboard API calls\nexport const dashboardService = {\n  getProfile: () => apiClient.get('/dashboard/profile'),\n  getJourney: () => apiClient.get('/dashboard/journey'),\n  getQuizzes: () => apiClient.get('/dashboard/quiz')\n};\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","access_token","data","setItem","refreshError","removeItem","window","location","href","authService","register","userData","login","credentials","logout","forgotPassword","email","resetPassword","password","validateToken","get","dashboardService","getProfile","getJourney","getQuizzes"],"sources":["C:/Users/Tasya Wulandari/Downloads/capstone-ellc.v1/capstone-ellc.v1/frontend/src/services/api.service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to attach JWT token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Add response interceptor to handle common errors\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If token has expired (401) and we haven't tried to refresh yet\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Try to refresh the token\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (refreshToken) {\r\n          const response = await axios.post('/api/auth/refresh', {}, {\r\n            headers: {\r\n              'Authorization': `Bearer ${refreshToken}`\r\n            }\r\n          });\r\n          \r\n          const { access_token } = response.data;\r\n          localStorage.setItem('accessToken', access_token);\r\n          \r\n          // Retry the original request with the new token\r\n          originalRequest.headers.Authorization = `Bearer ${access_token}`;\r\n          return apiClient(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // Refresh token failed, redirect to login\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication API calls\r\nexport const authService = {\r\n  register: (userData) => apiClient.post('/auth/register', userData),\r\n  login: (credentials) => apiClient.post('/auth/login', credentials),\r\n  logout: () => apiClient.post('/auth/logout'),\r\n  forgotPassword: (email) => apiClient.post('/auth/forgot-password', { email }),\r\n  resetPassword: (token, password) => apiClient.post(`/auth/reset-password/${token}`, { password }),\r\n  validateToken: () => apiClient.get('/auth/validate-token'),\r\n};\r\n\r\n// Dashboard API calls\r\nexport const dashboardService = {\r\n  getProfile: () => apiClient.get('/dashboard/profile'),\r\n  getJourney: () => apiClient.get('/dashboard/journey'),\r\n  getQuizzes: () => apiClient.get('/dashboard/quiz'),\r\n};\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}