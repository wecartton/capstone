{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tasya Wulandari\\\\Downloads\\\\ALL RESOURCES\\\\capstone-ellc.v1\\\\frontend\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Navigation from './Navigation';\nimport '../styles/QuizPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    level\n  } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(null);\n  const [questionProgress, setQuestionProgress] = useState({\n    current: 1,\n    total: 0\n  });\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const token = localStorage.getItem('accessToken');\n        const config = token ? {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        } : {};\n        console.log('Fetching quiz for level:', level);\n        console.log('Using token:', token ? 'Yes' : 'No');\n        const response = await axios.get(`/api/quiz/${level}`, config);\n        console.log('Quiz response:', response.data);\n        const {\n          questions: quizQuestions,\n          total_questions\n        } = response.data;\n        setQuestions(quizQuestions);\n        setQuestionProgress({\n          current: 1,\n          total: quizQuestions.length // Use actual length from response\n        });\n        const totalTime = quizQuestions.length * 30; // 30 seconds per question\n        setTimeLeft(totalTime);\n        console.log(`Loaded ${quizQuestions.length} questions for level ${level}`);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching quiz:', err);\n        console.error('Error response:', err.response);\n        if (err.response && err.response.status === 403) {\n          setError('This level is not unlocked yet. Please complete previous levels first.');\n        } else if (err.response && err.response.status === 401) {\n          setError('Authentication required. Please log in again.');\n          // Optionally redirect to login\n          setTimeout(() => navigate('/login'), 2000);\n        } else if (err.response && err.response.status === 404) {\n          setError('Quiz not found. Please try again later.');\n        } else {\n          setError('Failed to load quiz. Please try again later.');\n        }\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [level, navigate]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (loading || timeLeft === null) return;\n    const timer = setInterval(() => {\n      setTimeLeft(prevTime => {\n        if (prevTime <= 1) {\n          clearInterval(timer);\n          handleSubmit();\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [loading, timeLeft]);\n  const handleSelectAnswer = (questionId, option) => {\n    setSelectedAnswers({\n      ...selectedAnswers,\n      [questionId]: option\n    });\n  };\n  const handleQuestionClick = index => {\n    setCurrentQuestionIndex(index);\n    setQuestionProgress(prev => ({\n      ...prev,\n      current: index + 1\n    }));\n  };\n  const handleSubmit = async () => {\n    // Prepare answers in the format expected by the API\n    const formattedAnswers = Object.keys(selectedAnswers).map(questionId => ({\n      question_id: parseInt(questionId),\n      selected_option: selectedAnswers[questionId]\n    }));\n    console.log(`Submitting ${formattedAnswers.length} answers out of ${questions.length} questions`);\n    try {\n      // Get JWT token and set up axios config\n      const token = localStorage.getItem('accessToken');\n      const config = token ? {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      } : {};\n      console.log('Submitting quiz answers:', formattedAnswers);\n      const response = await axios.post(`/api/quiz/submit/${level}`, {\n        answers: formattedAnswers\n      }, config);\n      console.log('Submit response:', response.data);\n\n      // Navigate to result page with the result data\n      navigate(`/result/${level}`, {\n        state: {\n          result: response.data\n        }\n      });\n    } catch (err) {\n      console.error('Error submitting quiz:', err);\n      setError('Failed to submit quiz. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading quiz...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/quiz'),\n          children: \"Return to Level Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  // If no questions found\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"No questions available for this level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/quiz'),\n          children: \"Return to Level Selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n\n  // Format time left\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n  const formattedTime = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n\n  // Check if current question is answered\n  const isCurrentQuestionAnswered = selectedAnswers[currentQuestion.id] !== undefined;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: currentQuestion.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"options\",\n              children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `option ${selectedAnswers[currentQuestion.id] === option.charAt(0) ? 'selected' : ''}`,\n                onClick: () => handleSelectAnswer(currentQuestion.id, option.charAt(0)),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"option-circle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), option]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navigation-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentQuestionIndex(Math.max(0, currentQuestionIndex - 1)),\n              disabled: currentQuestionIndex === 0,\n              className: \"nav-button\",\n              children: \"Previous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCurrentQuestionIndex(Math.min(questions.length - 1, currentQuestionIndex + 1)),\n              disabled: currentQuestionIndex === questions.length - 1,\n              className: \"nav-button\",\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"level-star\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"star-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"star-shape\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"level-text\",\n                  children: [\"LV\", level]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timer\",\n              children: formattedTime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-progress\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Question \", questionProgress.current, \" of \", questionProgress.total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: `${questionProgress.current / questionProgress.total * 100}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-grid\",\n            children: questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `question-number ${index === currentQuestionIndex ? 'current' : ''} ${selectedAnswers[questions[index].id] !== undefined ? 'answered' : ''}`,\n              onClick: () => handleQuestionClick(index),\n              children: index + 1\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-button\",\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(QuizPage, \"OnhKFFpYC6awZm4hSwBha0tUpA4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","axios","Navigation","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","_s","level","navigate","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","loading","setLoading","error","setError","timeLeft","setTimeLeft","questionProgress","setQuestionProgress","current","total","fetchQuestions","token","localStorage","getItem","config","headers","Authorization","console","log","response","get","data","quizQuestions","total_questions","length","totalTime","err","status","setTimeout","timer","setInterval","prevTime","clearInterval","handleSubmit","handleSelectAnswer","questionId","option","handleQuestionClick","index","prev","formattedAnswers","Object","keys","map","question_id","parseInt","selected_option","post","answers","state","result","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","currentQuestion","minutes","Math","floor","seconds","formattedTime","isCurrentQuestionAnswered","id","undefined","question","options","charAt","max","disabled","min","style","width","_","_c","$RefreshReg$"],"sources":["C:/Users/Tasya Wulandari/Downloads/ALL RESOURCES/capstone-ellc.v1/frontend/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Navigation from './Navigation';\r\nimport '../styles/QuizPage.css';\r\n\r\nconst QuizPage = () => {\r\n  const { level } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n  const [questionProgress, setQuestionProgress] = useState({\r\n      current: 1,\r\n      total: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const token = localStorage.getItem('accessToken');\r\n        const config = token ? {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        } : {};\r\n\r\n        console.log('Fetching quiz for level:', level);\r\n        console.log('Using token:', token ? 'Yes' : 'No');\r\n\r\n        const response = await axios.get(`/api/quiz/${level}`, config);\r\n        console.log('Quiz response:', response.data);\r\n        \r\n        const { questions: quizQuestions, total_questions } = response.data;\r\n\r\n        setQuestions(quizQuestions);\r\n        setQuestionProgress({\r\n            current: 1,\r\n            total: quizQuestions.length // Use actual length from response\r\n        });\r\n            \r\n        const totalTime = quizQuestions.length * 30; // 30 seconds per question\r\n        setTimeLeft(totalTime);\r\n        \r\n        console.log(`Loaded ${quizQuestions.length} questions for level ${level}`);\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching quiz:', err);\r\n        console.error('Error response:', err.response);\r\n        \r\n        if (err.response && err.response.status === 403) {\r\n          setError('This level is not unlocked yet. Please complete previous levels first.');\r\n        } else if (err.response && err.response.status === 401) {\r\n          setError('Authentication required. Please log in again.');\r\n          // Optionally redirect to login\r\n          setTimeout(() => navigate('/login'), 2000);\r\n        } else if (err.response && err.response.status === 404) {\r\n          setError('Quiz not found. Please try again later.');\r\n        } else {\r\n          setError('Failed to load quiz. Please try again later.');\r\n        }\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, [level, navigate]);\r\n\r\n  // Timer countdown\r\n  useEffect(() => {\r\n    if (loading || timeLeft === null) return;\r\n\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prevTime) => {\r\n        if (prevTime <= 1) {\r\n          clearInterval(timer);\r\n          handleSubmit();\r\n          return 0;\r\n        }\r\n        return prevTime - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [loading, timeLeft]);\r\n\r\n  const handleSelectAnswer = (questionId, option) => {\r\n    setSelectedAnswers({ ...selectedAnswers, [questionId]: option });\r\n  };\r\n\r\n  const handleQuestionClick = (index) => {\r\n      setCurrentQuestionIndex(index);\r\n      setQuestionProgress(prev => ({\r\n          ...prev,\r\n          current: index + 1\r\n      }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    // Prepare answers in the format expected by the API\r\n    const formattedAnswers = Object.keys(selectedAnswers).map(questionId => ({\r\n      question_id: parseInt(questionId),\r\n      selected_option: selectedAnswers[questionId]\r\n    }));\r\n\r\n    console.log(`Submitting ${formattedAnswers.length} answers out of ${questions.length} questions`);\r\n\r\n    try {\r\n      // Get JWT token and set up axios config\r\n      const token = localStorage.getItem('accessToken');\r\n      const config = token ? {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      } : {};\r\n\r\n      console.log('Submitting quiz answers:', formattedAnswers);\r\n\r\n      const response = await axios.post(`/api/quiz/submit/${level}`, {\r\n        answers: formattedAnswers\r\n      }, config);\r\n      \r\n      console.log('Submit response:', response.data);\r\n      \r\n      // Navigate to result page with the result data\r\n      navigate(`/result/${level}`, { state: { result: response.data } });\r\n    } catch (err) {\r\n      console.error('Error submitting quiz:', err);\r\n      setError('Failed to submit quiz. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Navigation />\r\n        <div className=\"loading\">Loading quiz...</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Navigation />\r\n        <div className=\"container error-container\">\r\n          <h2>Error</h2>\r\n          <p className=\"error\">{error}</p>\r\n          <button onClick={() => navigate('/quiz')}>Return to Level Selection</button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  // If no questions found\r\n  if (questions.length === 0) {\r\n    return (\r\n      <>\r\n        <Navigation />\r\n        <div className=\"container\">\r\n          <h2>No questions available for this level</h2>\r\n          <button onClick={() => navigate('/quiz')}>Return to Level Selection</button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  // Format time left\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n  const formattedTime = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\r\n\r\n  // Check if current question is answered\r\n  const isCurrentQuestionAnswered = selectedAnswers[currentQuestion.id] !== undefined;\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className=\"quiz-page\">\r\n        <div className=\"quiz-container\">\r\n          {/* Left column - Question and options */}\r\n          <div className=\"question-column\">\r\n            <div className=\"question-card\">\r\n              <h3>{currentQuestion.question}</h3>\r\n              \r\n              <div className=\"options\">\r\n                {currentQuestion.options.map((option, index) => (\r\n                  <div \r\n                    key={index} \r\n                    className={`option ${selectedAnswers[currentQuestion.id] === option.charAt(0) ? 'selected' : ''}`}\r\n                    onClick={() => handleSelectAnswer(currentQuestion.id, option.charAt(0))}\r\n                  >\r\n                    <span className=\"option-circle\"></span>\r\n                    {option}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"navigation-buttons\">\r\n              <button \r\n                onClick={() => setCurrentQuestionIndex(Math.max(0, currentQuestionIndex - 1))}\r\n                disabled={currentQuestionIndex === 0}\r\n                className=\"nav-button\"\r\n              >\r\n                Previous\r\n              </button>\r\n              \r\n              <button \r\n                onClick={() => setCurrentQuestionIndex(Math.min(questions.length - 1, currentQuestionIndex + 1))}\r\n                disabled={currentQuestionIndex === questions.length - 1}\r\n                className=\"nav-button\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right column - Level star, timer, question grid, submit */}\r\n          <div className=\"sidebar\">\r\n            {/* Level star with timer */}\r\n            <div className=\"level-star\">\r\n              <div className=\"star-container\">\r\n                <div className=\"star-shape\">\r\n                  <span className=\"level-text\">LV{level}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"timer\">{formattedTime}</div>\r\n            </div>\r\n\r\n            <div className=\"question-progress\">\r\n                <span>Question {questionProgress.current} of {questionProgress.total}</span>\r\n                <div className=\"progress-bar\">\r\n                    <div \r\n                        className=\"progress-fill\" \r\n                        style={{\r\n                            width: `${(questionProgress.current / questionProgress.total) * 100}%`\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* Question grid */}\r\n            <div className=\"question-grid\">\r\n              {questions.map((_, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={`question-number ${\r\n                    index === currentQuestionIndex ? 'current' : ''\r\n                  } ${\r\n                    selectedAnswers[questions[index].id] !== undefined ? 'answered' : ''\r\n                  }`}\r\n                  onClick={() => handleQuestionClick(index)}\r\n                >\r\n                  {index + 1}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Submit button */}\r\n            <button \r\n              className=\"submit-button\"\r\n              onClick={handleSubmit}\r\n            >\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuizPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}